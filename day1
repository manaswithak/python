print("Hello world")
a=5
print(a)
a="hi"
print(a)
print(True)
print(15)
  
'''fuction in python: here def is used for function definition and : is used same as {} in c
 and for function definiton u need to give space that is indentation but for calling the function
 it should not have any space. if spaca given it considers it as part of the function definition.
 here greet is the name of your choice to give'''

def greet():
    print("hello world")  # function definition

greet()  # function calling

def greet(a):
    print("hello "+a)  # function definition

greet("world")  # function calling

def add(a,b):
    print(a+b)

add(5,6) 

def sub(a,b):
    print(a-b)

sub(5,6)    

def mul(a,b):
    print(a*b)

mul(5,6)    

def div(a,b):
    print(a/b)

div(5,6)   

def exp(a,b):
    print(a**b)

exp(2,2)    

def mod(a,b):
    print(a% b)

mod(5,6)    

''' using return means the value is again being in the function only so for that again print should be used
so that the value bring arount the function is printed using print of the function calling'''

def add(a,b):
    return(a+b)

add(5,6)   #11
print(add(5,6))

def sub(a,b):
    return(a-b)

sub(5,6)
print(sub(5,6))

def mul(a,b):
    return(a*b)

mul(5,6)
print(mul(5,6))

def div(a,b):
    return(a/b)

div(5,6)
print(div(5,6))

def mod(a,b):
    return(a%b)

mod(5,6)
print(mod(5,6))

def exp(a,b):
    return(a**b)

exp(5,6)
print(exp(5,6))

def add(a,b):
    return(a+b)

add(5,6)
print(add(5,6)+add(1,3)) 

name="hello"
def add(a,b):
    print(name)
    return a+b

print(add(4,5))


# def add(c,d):
#     print(c+d)
#     student=100  HERE student is being defined in function but print is out so not possible
    #    student is local variable
   
# print(student)
# add(3,4)

student=100 
 #this is global variable so print can be done through function also but not
# vice versa coz that will be local variable and also print has to done in function only 
# out of function it cant be considered
def add(c,d):
    print(c+d)    
    print(student)
add(3,4)   

# def add(c,d):
#     print(c+d)    
#     print(student)
# add(3,4)    
# student=100 here it throws error coz line by line it goes so after student no print
# but in function it cant be considered as that line is already done 

# def add(c,d):
#     print(c+d)    
#     print(student)
# student=100 
# add(3,4) here printed coz first student is considered then add so in function both are considered
#  as student is before so print possible in previous since add is first so function will be over
#  then later student is done and no print.

a=10
b="string"
c=True
d=2.1230
e= [1,2,3,"abc",True,2.4455]

print(type(a)) 
print(type(b))
print(type(c))
print(type(d))
print(type(e))
print(e[3])
e[2]="two"  #modifying the value is possible as it is mutable
print(e[2])
print(e[-1]) #prints the last element

e.append(1000) #append add the value at the end of list
print(e)
e=[1,2,3,"abc",True,2.1456]
e.append(1000)
print(e)
print(e.index("abc"))
# print(e.index("abcd")) #it shows that abcd is not in the list
print(e.index(True))
f=[6,7,8,9]
e.extend(f)  #here e will add elemets from f also and gets extended
# extend -> the argument should be list -> f is a list
print(e)
e.remove(8)  #it removes the element from that particular list
print(e)
e.pop()  #removes last element from list
print(e)
e.pop(2)  #removes element of the mentioned index from the list pop(argument)
print(e)
e.clear() #clear all the elements from the list
print(e)
e=[5,6,7,True,"abc",2.335]
# print(e[2:5]) #here this is used for slicing : and 5 is not sliced so end one not considered [start:end]
# print(e[1:])  #here only start mentioned so till end it slice as end is not there so to slice till end this can be used
e.reverse()
print(e)

# def add(a,b):
#     print(a+b)
#  here in output it shows 7 and none coz the function add has print in function and no return value in function so the outer print will have 
# nothing so it shows none means no value
# now same thing is happening in print(e.reverse()) coz here it has no value so none 
# print(add(3,4))    

# def add(a,b):
#     print(a+b)
#     return "now it has a value"
# here now since return is there so now value stored in function is printed using print of function call so it has value now and not none
# print(add(3,4))    

# e.sort() #orders the elements in ascending order but here in this case it shows type error as it cant arrange in ascending order and it shows only if it is numbers
#  between the boolean sting
# print(e)

f=[1,43,685,9,6,3,7,0,5]
f.sort()
print(f)  #here sort is used to arrange in asc order

'''multiline comment'''
# single line comment

# shallow copy
e=[1,2,3,True,"abc",2.435]
f=e #here since f is e so this is shallow copy that is changes made in f will automatically change e also and viceversa
f.pop()
print(f)
print(e)

# copy method for dupication
e=[1,2,3,True,"abc",2.435]
f=e.copy() #here since copy is used a duplicate one is done for f as list of e so changes made in f doesnt affect e and viceversa
f.pop()
print(f)
print(e)
e.insert(4,6) #insert(index,value) inserting element at a particular index and that index previous element will shift to next w/o being removed
print(e)

# Tuple in python

a=(1,2,3,4,5,6)
b=(6,7,8,9,10,11)
'''print(a)
print(type(a))
print(a[1])
a[1]= "two" #tuples are immutable they cant be changed once created
print(a)'''

print(len(a))
print(a+b) #here b is getting merged with a even the same value present in both will agin repeat
print(b*2) #here b will be in the list twice if 3 thrice like repeatation so multiply means another tuple is created and merged
print(b.count(6)) #here number of 6 present in b it shows b*2 doesnt affect it
d=b*2
print(d.count(6)) #here is shows 2 as b*2 so 2 6

print(d.index(6)) #here in d since it has 2 6 but the first index is only shown
