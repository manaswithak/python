#inheritance method
class student:
    def __init__(self,student_name,usn_no,course):
            self.student_name=student_name  #self initialising is important here
            self.usn_no=usn_no
            self.course=course
    def print_details(self):
          print(f'''name={self.student_name} usn_no={self.usn_no} course={self.course}''')
          
class laptop(student): #the features of student class has been passed dowm to laptop class
      def __init__(self,student_name,usn_no,course,cpu,gpu,ram):
            super().__init__(student_name,usn_no,course)  #for this reinitialize is not necessary here as in parent class it is already done
            self.cpu=cpu
            self.gpu=gpu
            self.ram=ram
# even if the next three lines are not typed still in output you will get parents details only as they are linked      
      def print_details(self):
            print(f"cpu={self.cpu} gpu={self.gpu} ram={self.ram}")  
            return super().print_details()
      
acer=laptop("raj",1234,"python","i5",12,"RTX 4060")
acer.print_details()

#so here first in acer=laptop it goes to laptop class and process the information in constructor then next line is super constructor so it goes to parent class 
#and store the necessary details like reinstialising and then return to laptop class and reintialize the one there then goes to print_details here first
#laptop one is printed then the print_details of super class is returned and printed.

class student:
        def __init__(self,student_name,usn_no,course):
            self.student_name=student_name  #self initialising is important here
            self.usn_no=usn_no
            self.course=course
        def print_details(self):
            print(f'''name={self.student_name} usn_no={self.usn_no} course={self.course}''')
          
class laptop(student): #the features of student 9class has been passed dowm to laptop class
        def __init__(self,student_name,usn_no,course,cpu,gpu,ram):
            super().__init__(student_name,usn_no,course)  #for this reinitialize is not necessary here as in parent class it is already done
            self.cpu=cpu
            self.gpu=gpu
            self.ram=ram
# even if the next three lines are not typed still in output you will get parents details only as they are linked      
        def print_details(self):
            print(f"cpu={self.cpu} gpu={self.gpu} ram={self.ram}")  
            return super().print_details()
        
class mobile(laptop):
     def __init__(self, student_name, usn_no, course, cpu, gpu, ram, mob_no):
          super().__init__(student_name, usn_no, course, cpu, gpu, ram)
          self.mob_no=mob_no

     def print_details(self):
          print(f"Mobilenumber={self.mob_no}")
          return super().print_details()   
      
acer=mobile("raj",1234,"python","i5",12,"RTX 4060",1037932475)
acer.print_details()

#polymorphism
#polymorphism allows different classes to define methods with the same name that behave differently
#here they have same method but does something different so here method is sound() this is called method overriding(compile-time polymorphism)
class Bird:
    def sound(self):
        print("chirp")

class cat:
    def sound(self):
        print("meow")

def make_sound(animal):
    animal.sound()

b = Bird()
c = cat()

make_sound(b)
make_sound(c)

#method overriding (run-time polymorphism) 
class parent:
    def show(self):
        print("parent's method")

class child(parent):
    def show(self):
        print("child's method")

obj=child()
obj.show()

#operator overloading
# method overriding(compile-time polymorphism)

class Point:
    def __init__(self,x,y):
        self.x=x
        self.y=y

    def __add__(self,other):
        return Point(self.x + other.x, self.y + other.y)  
    
p1= Point(1,2)
p2= Point(3,4)
p3= p1 + p2
print(p3.x,p3.y)

#here first p1 will have the self x and y but now to store p2 values we use other x and y (other -> it can another name also) then 
#  return Point(self.x + other.x, self.y + other.y)  this will have addition values of x and y but since point class is mentioned they go to constructor
# again and then return to p3 so last line will print p3.x and p3.y

#create an example showing encapsulation using private  variables
# show method overriding with base and derived class

#error(exception) handling -> to prevent program crashes, handle error gracefully 
#types of error
# 1.TypeError
a=10
b="hello"
print(a+b)  #here u get typeerror as int+string is not possible so operation on two different datatype is not possible

# 2.ValueError
a="ten"
print(int(a)) #valueerror coz int has to have numebr but ten is not so even after converting it cant change

# 3.ZeroDivisionError
a=10
print(a/0)  #here dividing by zero you will get infinity but in python we call that as zerodivision error

# 4.NameError
a=10
print(a)
print(b)  #here you will get nameerror as b is not declared with any number so you cant print

# 5.IndexError
a=[1,2,3]
print(a[4]) #trying to access index that is not in list is indexerror

# 6.SyntaxError
a=[1,2,3]
print(a[4]  #this has syntax error has ) is not there so not mention of some syntax will show syntaxerror
      
# 7.LogicalError->this will not be shown as error coz output will be printed but logic is wrong
def add(a,b):
    print(a-b)  #here we mentioned add but doing subtraction so logically wrong but you will get output
add(5,6)


try:
    print(1/0)
    print(int("hello"))
except:#here using this the line will be print and go to next line without causing problem coz dirctly doing will show error and next line will not be printed
    print("there is an error")
print("rest of the program")

try:
    print(1/0)
    print(int("hello"))
except ZeroDivisionError:
    print("we cannot divide by zero , try another number")    #another method if u know the error name but both error cant be printed once only 1st one
except ValueError:
    print("cannot convert this string to number")
print("rest of the program")

try:
    result=10/2
except ZeroDivisionError:
    print("error")           #to print if error and if no error then else option will be printed
else:
    print("success:",result)

# raising exceptions manually -> naming your own error
age=int(input("enter your age: "))
if age<18:
    raise ValueError("age must be 18 or older")
else:
    print("access granted")

#file handling
#f=open("firstfile.txt","x")   #x->create
r=open("firstfile.txt","r")   #r->read
content=r.read()
r.close()  #if not close so no security and data can be corrupted and increase file vulnerability
print(content)
