#match statement which is same as switch case statement
day = 7
match day:
    case 1:
        print("monday")

    case 2:
        print("tuesday")

    case 3:
        print("wednesday")

    case 4:
        print("thursday")

    case 5:
        print("friday")

    case 6:
        print("saturday")

    case 7:
        print("sunday")

    case _:   #works same as the default one in c
        print("looking forward for the weekend")

#elif statement
marks=int(input("enter the marks= "))
if marks>=95 and marks<=100:
    print("S grade")

elif marks>=85 and marks<=94:
    print("A grade")

elif marks>=75 and marks<=84:
    print("B grade")

elif marks>=65 and marks<=74:
    print("C grade")

elif marks>=40 and marks<=64:
    print("D grade")

elif marks<40:
    print("Failed")

else:
    print("invalid mark")

#for loop
for i in range(1,101):
    print(i)

for i in range(7,76):
    print(i)

for i in range(6,65):
    print(i)

for i in range(3,150):
    print(i)

#while loop
while True:
    x=int(input("enter the number to print : "))
    if x==0:
        break
    print(x)
    print("enter 0 to break")

#continue
for i in range(1,6):
    if i == 3 :
        continue
    print(i)

for i in range(1,100):
    if i%2==0:
        continue
    print(i)

for i in range(1,100):
    if i%2!=0:
        continue
    print(i)

for i in range(1,100):
    if i%2==0:
        pass  #does nothing it is just there when u dont know wt to do
    print(i)
      
#import module(which is not core in python but we are importing it and using)
import math
import random

print(math.sqrt(144))
print(math.floor(5.9))
print(math.ceil(5.1))
print(random.randint(1,10))
print(random.randint(5,55))
print(random.randrange(1,11))  #except for 11 remaining can be printed but not 11 in then range condition

#create a file name calculator and do the below which is useful for direct operations
def add(a,b):
    print(a+b)

def sub(a,b):
    print(a-b)

def mul(a,b):
    print(a*b)

def div(a,b):
    print(a%b)

#another file with any name so here we can indirectly use the calculator file
import calculator #importing our own file calculator where all opeartions are included in it
calculator.add(5,6)
calculator.sub(5,6)
calculator.mul(5,6)
calculator.div(5,6)

#types of arguments

#positional arguments -> which depends on the position of arguments
def greet(student,trainer):
    print(f"GOOD AFTERNOON {trainer}")
    print(f"Welcome {student}")

greet("subha","manusri")  #this is positional argument because it depends on its position subha argument has student parameter and manusri has trainer
#it completely depends on postion of arguments and matching paramter position 

#keyword arguments
def greet(student,trainer):
    print(f"GOOD AFTERNOON {trainer}")
    print(f"Welcome {student}")

greet(trainer="subha",student="manusri")  #giving keyword to the argument and using that keyword as parameters so even if postion is different it
#considers the keyword and proceed

#variable length arguments  ->not sure when how many arguments you are passing so automatically the parameters are  set according to arguments passed
def print_numbers(*args):  #args are stored in for loop as it is list
    for i in args:
        print(i)

print_numbers(5,6,7,8,9,24,2,42,354,645)

def print_numbers(**kwargs):  #kwargs use dictionary to store key and value
    for i in kwargs.keys():
        print(i)
    for i in kwargs.values():
        print(i)
    for k,v in kwargs.items():
        print(f"key {k} : value {v}")

print_numbers(trainer="govinthan",student1="manusri",student2="yash",student3="likitha",grade=True,marks=9.5)

#class in python

class student:
    #constructor is a function of class which is called immediately after creating object(automatically)
    #to initialize variable we have to create constructor. variable is created after class
    def __init__(self,student_name,usn_no,course):
            self.student_name=student_name
            self.usn_no=usn_no
            self.course=course
    def print_details(self,current_course="python"):
          print(f'''name={self.student_name} usn_no={self.usn_no} course={self.course}''')  #self is used to store that self itself like yash details yash self.
          print(current_course)   #this will be common to everyone as no self is mentioned


yash=student("yash",12345,"python")
tvisha =student("tvisha",1234,"javascript")
deekshitha=student("deekshitha",24236,"c")
devipriya=student("devipriya",43676,"java")
anjali=student("anjali",1325767,"css")

yash.print_details()
deekshitha.print_details()


class A:
    def speak(self):
        print("A speaks")

class B(A):
    def speak(self):
        print("B speaks")

obj = B()
obj.speak()

class Demo:
    def __init__(self, x):
        self.__x = x

    def show(self):
        print(self.__x)

d = Demo(10)
d.show()
print(d._Demo__x)

i = 0
while i < 3:
    i += 1
    if i == 2:
        continue
    print(i)

    s = {1, 2, 2, 3}
print(len(s))

class Demo:
    def __init__(self, val):
        self.value = val

    def show(self):
        print(self.value * 2)

obj = Demo(5)
obj.show()

class Test:
    count = 0

    def __init__(self):
        Test.count += 1

a = Test()
b = Test()
c = Test()
print(Test.count)

class A:
    def greet(self):
        print("Hello from A")

class B(A):
    def greet(self):
        print("Hello from B")

class C(A):
    def greet(self):
        print("Hello from C")

class D(B, C):
    pass

d = D()
d.greet()

class Counter:
    def __init__(self, limit):
        self.limit = limit

    def count_up(self):
        for i in range(1, self.limit + 1):
            print(i, end=' ')

c = Counter(3)
c.count_up()

class Multiply:
    def table(self, num):
        for i in range(1, 4):
            print(num * i, end=' ')

Multiply().table(2)    
